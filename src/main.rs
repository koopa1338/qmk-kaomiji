use std::collections::BTreeMap;

fn main() {
    // TODO: parse hashmap from json/toml
    #[rustfmt::skip]
    let unicode_map: BTreeMap<&str, &str> = BTreeMap::from_iter([
        ("amore", r#"♥‿♥"#),
        ("anger", r#"Σ(▼□▼メ)"#),
        ("annoyed", r#"(¬_¬")"#),
        ("anticipation", r#"(⊃‿⊂)"#),
        ("applause", r#"(￣ー￣)//””"#),
        ("archer", r#"<( ･ｪ-)<}"#),
        ("arm wrestle", r#"( `_)乂(_' )"#),
        ("ashamed", r#"(；一_一)"#),
        ("attentive", r#"(⌒ ͜ʖ⌒)b"#),
        ("bat", r#"/|\( ;,; )/|\"#),
        ("bear", r#"ʕ•͡ᴥ•ʔ"#),
        ("best buds", r#"└(^o^ )Ｘ( ^o^)┘"#),
        ("boo", r#"ヾ(｀ε´)ﾉ"#),
        ("boogie", r#"ヽ(⌐■_■)ノ♪♬"#),
        ("bowling", r#"＝( ^o^)ノ___ｏ"#),
        ("bro fist", r#"(ó ì_í)=óò=(ì_í ò)"#),
        ("buds", r#"（　＾＾）人（＾＾　）"#),
        ("butterfly", r#"Ƹ̵̡Ӝ̵̨̄Ʒ"#),
        ("celebrate", r#"＼(＾O＾)／"#),
        ("chameleon", r#"ᘛ⁐̤ᕐᐷ"#),
        ("chasing Butterfly", r#"〜〜(／￣▽)／　〜ф"#),
        ("chasing", r#"(○｀д´)ﾉｼ Σ(っﾟДﾟ)っ"#),
        ("chor", r#"＼(^o)(^0^)(o^)／"#),
        ("chubby", r#"^)_(^"#),
        ("clap", r#"(^^)//"#),
        ("coffee", r#"( -_-)旦~"#),
        ("cold", r#"（ ╹﹏╹ ）"#),
        ("comfort", r#"(。。;)＼(-_-)"#),
        ("confused", r#"｢(ﾟﾍﾟ)"#),
        ("couple", r#"(ɔˆ ³(ˆ⌣ˆc)"#),
        ("crazy", r#"(◐‿◑)"#),
        ("cry", r#"ಥ_ಥ"#),
        ("cunning", r#"(¬‿¬)"#),
        ("cutting a rug", r#"┌|°з°|┘"#),
        ("cyborg", r#"(╬☉Д⊙ฺ)"#),
        ("dance", r#"♪┏(・o･)┛♪"#),
        ("darth vader", r#"(｡▼皿▼)"#),
        ("dead smile", r#"✖‿✖"#),
        ("dead", r#"(#×_×)"#),
        ("deal with it", r#"(▀̿Ĺ̯▀̿ ̿)"#),
        ("despair", r#"ヽ(´Д｀ヽミノ´Д｀)ノ"#),
        ("discontent", r#"（￣へ￣）"#),
        ("dissatisfied", r#"(*￣m￣)"#),
        ("distraught", r#"༼ ༎ຶ ෴ ༎ຶ༽"#),
        ("dog", r#"◤◡ᴥ◡◥"#),
        ("doggy", r#"V●ᴥ●V"#),
        ("dreaming", r#"(_ _)..ooOO"#),
        ("evil lol", r#"(๑≖ิิ益≖ิ๑)"#),
        ("excited", r#"ヽ(★ω★)ノ"#),
        ("exorcism", r#"†_(ﾟｰﾟ*)β"#),
        ("falling asleep", r#"(+.+)(-.-)(_ _)"#),
        ("fed up", r#"＼(｀0´)／"#),
        ("fighting", r#"(ง •̀ゝ•́)ง"#),
        ("fish", r#"ϵ( 'Θ' )϶"#),
        ("fistup", r#"(ง •̀_•́)ง"#),
        ("flex", r#"ᕦ(ò_óˇ)ᕤ"#),
        ("flip table anger", r#"(╯°益°)╯彡┻━┻"#),
        ("flip table", r#"(╮°-°)╮┳━━┳ ( ╯°□°)╯ ┻━━┻"#),
        ("flip", r#"(╯°□°）╯︵ ┻━┻"#),
        ("freak out", r#"ヽ(ﾟДﾟ)ﾉ"#),
        ("frightened", r#"(／。＼)"#),
        ("frog", r#":(¦)"#),
        ("furious", r#"(ò_ó)"#),
        ("ge", r#"（￣□￣；）"#),
        ("ghost", r#"(((༼•̫͡•༽)))"#),
        ("gift", r#"(´・ω・)っ由"#),
        ("giggle", r#"(о＾ω＾о)"#),
        ("gimme", r#"༼ つ ◕_◕ ༽つ"#),
        ("giving up", r#"(;-_-)ノ"#),
        ("glad", r#"＼（＾ ＾）／"#),
        ("glee", r#"｡◕‿◕｡"#),
        ("golf clap", r#"(´ー｀)┌ﾌｯ"#),
        ("goodbye", r#"(^ _ ^)/~~"#),
        ("grandma", r#"◖ර◞ʖ◟ර◗"#),
        ("grin", r#"(￣▼￣)"#),
        ("grooving", r#"└(^o^)┐"#),
        ("gun", r#"￢o(￣-￣ﾒ)"#),
        ("hammer throw", r#"(ﾉ-o-)ﾉ 中"#),
        ("happy cryin", r#"(°̥̥̥̥̥̥̥̥ᴗ°̥̥̥̥̥̥̥̥)"#),
        ("happydance", r#"ᕕ( ᐛ )ᕗ"#),
        ("header", r#"(( ＿ ＿)☆ ≡〇"#),
        ("heartbroken", r#"(∿°○°)∿ ︵ ǝʌol"#),
        ("hidewall", r#"┬┴┬┴┤(･_├┬┴┬┴"#),
        ("hiding", r#"┬┴┬┴┤･ω･)ﾉ"#),
        ("high5", r#"(*^o^)人(^o^*)"#),
        ("hipster", r#"( ˇ෴ˇ )"#),
        ("hit", r#"（。_°☆＼(- – )"#),
        ("hitting", r#"( ｀皿´)｡ﾐ/"#),
        ("hoo", r#"(ﾉﾟ0ﾟ)ﾉ~	Yoo-"#),
        ("hopeful", r#"o(^^o)(o^^)o"#),
        ("howIKnow", r#"┗(･ω･;)┛"#),
        ("hug me", r#"⊂((・▽・))⊃"#),
        ("hug", r#"(っ⌒‿⌒)っ"#),
        ("hugging", r#"(>^_^)><(^o^<)"#),
        ("huh", r#"[•.•ิ]"#),
        ("hurt", r#"┗( ●-﹏ ｀｡)づ"#),
        ("in love", r#"(♥_♥)"#),
        ("jamming", r#"♫.(◠౪◠).♫"#),
        ("john lennon", r#"⎰≀.☮-☮≀⎰"#),
        ("kicking", r#"( ｀o´)_θ☆"#),
        ("kirby", r#"(っ^‿^)っ"#),
        ("kiss me", r#"( ˘ ³˘)♥"#),
        ("kiss", r#"(ﾉ´ з `)ノ"#),
        ("kissing", r#"(* ￣)(￣ *)"#),
        ("kitty cat", r#"⋟^≏^⋞"#),
        ("kitty", r#"(=^･ｪ･^=)"#),
        ("koala", r#"ʕ •ᴥ•ʔ"#),
        ("konn", r#"♪(●′▽`)ﾉ"#),
        ("kyu", r#"／人◕ ‿‿ ◕人＼"#),
        ("laser", r#"m( ﾟ皿ﾟ)m★━━"#),
        ("lethargic", r#"(‾ʖ̫‾)"#),
        ("litter", r#"(*・_・)ノ⌒*"#),
        ("look", r#"ಠ_ಠ"#),
        ("mad", r#"o(>< )o⌒*"#),
        ("magic", r#"(∩｀-´)⊃━☆ﾟ.*･｡ﾟ"#),
        ("matte", r#"(″･ิ_･ิ)っ"#),
        ("meh", r#"（＾～＾）"#),
        ("mellow", r#"ヽ（´ー｀）┌"#),
        ("monkey", r#"@( o･ω･)@"#),
        ("monocle", r#"ಠ_ರೃ"#),
        ("mustache", r#"( ￣┏＿┓￣)"#),
        ("ninja Star", r#"( --)/ ==卍"#),
        ("nodd", r#"(￣ー￣（＿　＿（"#),
        ("nyan Cat", r#"[^._.^]ﾉ彡"#),
        ("oh No", r#"L(´□｀L)	"#),
        ("ohayou", r#"＼（～Ｏ～）／"#),
        ("pain", r#"(>_<)"#),
        ("paint", r#"(。･_･)ノ”【】"#),
        ("panda", r#"◖㈠ ω ㈠◗"#),
        ("panic", r#"\\(<.<|>.>)//"#),
        ("peace", r#"✌(◕‿-)✌"#),
        ("peering", r#"(/ω･＼)"#),
        ("perplexed", r#"༼ঢ_༽ঢ༽"#),
        ("phew", r#"ε-(´・｀) ﾌ"#),
        ("pleased", r#"(─‿‿─)"#),
        ("pointing", r#"(☞ﾟヮﾟ)☞"#),
        ("poke", r#"(*・)σσ(*゜O゜)"#),
        ("pray", r#"(╯˘ -˘ )╯"#),
        ("precious", r#"（人’∀’）"#),
        ("proposal", r#"( ° ᴗ°)~ð"#),
        ("psycho", r#"ヘ（。□°）ヘ"#),
        ("pumped", r#"ヽ( ★ω★)ノ"#),
        ("punched", r#"(。_°)☆"#),
        ("punching", r#"(o￣∇￣)=◯)`ν゜)･"#),
        ("puppy Love", r#"∊♡_ᴥ_♡∍"#),
        ("puppy", r#"U＾ェ＾U"#),
        ("put Em Up", r#"Q('.'Q)"#),
        ("puzzled", r#"「(°ヘ°)"#),
        ("radio", r#"|̲̅̅●̲̅̅|̲̅̅=̲̅̅|̲̅̅●̲̅̅|"#),
        ("rifle", r#"( ´-ω･)︻┻┳══━一"#),
        ("romantic", r#"(ɔ˘з˘)ɔ"#),
        ("run", r#"ε=┏( >_<)┛"#),
        ("sadcry", r#"(ಥ﹏ಥ)"#),
        ("sankyu", r#"＼(-_- )"#),
        ("satan", r#"←～（o ｀▽´ )oΨ"#),
        ("satisfied", r#"(▰˘◡˘▰)"#),
        ("scaring", r#"(☄ฺ◣д◢)☄ฺ"#),
        ("scary", r#"(╯‵Д′)╯"#),
        ("scheming", r#"ಠᴗಠ"#),
        ("scratching", r#"<(;￣ ･￣)"#),
        ("seal", r#"ᶘ ᵒᴥᵒᶅ"#),
        ("shocked", r#"⊙▂⊙"#),
        ("shooting", r#"(★▼▼)o┳*--"#),
        ("shrug flip table", r#"┻━┻ ︵ ¯\ (ツ)/¯ ︵ ┻━┻"#),
        ("shrug sad", r#"¯\_▐ ☯ ︿ ☯ ▐_/¯"#),
        ("shrug", r#"¯\_(ツ)_/¯"#),
        ("shrugconfused", r#"¯\(°_o)/¯"#),
        ("shy", r#"（/｡＼)"#),
        ("sick", r#"[ ± _ ± ]"#),
        ("skeptic", r#"(•͡.•͡)"#),
        ("slapping", r#"(；^＿^)ッ☆(　゜o゜)"#),
        ("sleeping", r#"(∪｡∪)｡｡｡zzZ"#),
        ("sleepy", r#"(- o - ) zzZ ☽"#),
        ("smile", r#"(ʘ‿ʘ)"#),
        ("smiling", r#"( ͡° ͜ʖ ͡°)"#),
        ("smitten", r#"(｡♥‿♥｡)"#),
        ("smooch", r#"(づ￣ ³￣)づ"#),
        ("sniper", r#"( ´-ω･)︻┻┳══━一"#),
        ("snowing", r#"❆❅❉"#),
        ("sobby", r#"(ू˃̣̣̣̣̣̣︿˂̣̣̣̣̣̣ ू)"#),
        ("sonic", r#"੯ू•́ू ໒꒱⁼³₌₃"#),
        ("sorry", r#"(シ_ _)シ"#),
        ("spongebob", r#"|∴め ϖ め∴|"#),
        ("sprint", r#"ε=ε=ε=┌(๑ʘ∀ʘ)┘"#),
        ("squid", r#"<コ:彡"#),
        ("superhero", r#"─=≡Σ(([ ⊐•̀⌂•́]⊐"#),
        ("surprised arms", r#"( ｣｡╹o╹｡)｣"#),
        ("surprised glee", r#"（｡◕ o ◕｡）"#),
        ("sweat drop", r#"-_-;"#),
        ("sword fight", r#"(´>_●)メ(●_<｀)"#),
        ("table back", r#"┬─┬ノ( º _ ºノ)"#),
        ("table back", r#"┬─┬ノ( º _ ºノ)"#),
        ("table flips You", r#"┬─┬︵/(.□.)╯"#),
        ("tasty", r#"(๑╹ڡ╹๑)"#),
        ("tripping", r#"---(o_　_)o"#),
        ("unimpressed", r#"（￣～￣）"#),
        ("up in arms", r#"{{|└(>o< )┘|}}"#),
        ("vampire", r#"(*▿▿* ƪ)"#),
        ("vaping", r#"◯０o。(ー。ー)y"#),
        ("waiter", r#"且_(ﾟ◇ﾟ；)ノﾞ"#),
        ("walrus", r#"(:3 っ)っ"#),
        ("waving", r#"( ^_^)ノ"#),
        ("weary", r#"(´~`)"#),
        ("weeping", r#"(;´༎ຶД༎ຶ`)"#),
        ("why", r#"ლ(ಠ益ಠ)ლ"#),
        ("wink", r#"(^‿◕)"#),
        ("wizard", r#"(∩｀-´)⊃━☆ﾟ.*･｡ﾟ"#),
        ("worried arms", r#"(╯•﹏•╰)"#),
        ("worried simple", r#"(◍•﹏•)"#),
        ("worried", r#"(´╹〽╹`)"#),
        ("writing", r#"＿〆(。。)"#),
        ("yelling", r#"ヾ(*￣O￣)ツ"#),
        ("yikes", r#"(☉__☉”)"#),
        ("yummy", r#"(っ˘ڡ˘ς)"#),
        ("zombie", r#"[¬º-°]¬"#),
    ]);

    println!("const ucis_symbol_t ucis_symbol_table[] = UCIS_TABLE(");
    let unicode_count = unicode_map.len();
    for (idx, (name, k)) in unicode_map.into_iter().enumerate() {
        let mut n = name.to_lowercase();
        n.retain(|c| c != ' ');
        print!("\tUCIS_SYM(\"{}\", ", n);
        let len = k.chars().count();
        for (idx, b) in k.chars().enumerate() {
            print!("{:#06X}", b as u32);
            if idx + 1 < len {
                print!(",");
            }
        }
        print!(")");
        if idx + 1 < unicode_count {
            print!(",");
        }
        print!(" /* {k} */\n");
    }
    println!(");");
}
